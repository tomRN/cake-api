# Configuration file for Serverless service

service: cake-api

# Configure the service provider.
provider:
    name: aws
    runtime: nodejs12.x
    region: eu-west-2
    stage: ${opt:stage, 'dev'}
    profile: ${opt:profile, 'tomn-personal'} # Requires that you have a profile called 'tomn-personal' on your machine to deploy, in reality our CD pipeline would take care of deployments
    environment:
      cakeTableName : ${self:custom.cakeTableName}
    versionFunctions: false
    iamRoleStatements: # Too permissive but ok for a simple POC.
        - Effect: 'Allow'
          Action:
            - dynamodb:*
          Resource: '*'

custom:
    service: ${self:service}
    region: ${self:provider.region}
    stage: ${self:provider.stage}
    cakeTableName: cake_api_cakes_${self:custom.stage}
    serverless-offline:
      httpPort: 4040

plugins:
  - serverless-offline

package:
    exclude:
        - src/**
        - layers/**

resources:
  Resources:
    CakeTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.cakeTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    

functions:
  postCake:
    handler: build/endpoints/cakes/postCake.handler
    events:
      - http:
          path: cakes
          method: POST
          cors: true

  putCake:
    handler: build/endpoints/cakes/putCake.handler
    events:
      - http:
          path: cake/{cakeID}
          method: PUT
          cors: true

  getCakes:
    handler: build/endpoints/cakes/getCakes.handler
    events:
      - http:
          path: cakes
          method: GET
          cors: true

  deleteCake:
    handler: build/endpoints/cakes/deleteCake.handler
    events:
      - http:
          path: cakes/{cakeID}
          method: DELETE
          cors: true